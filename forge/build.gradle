
plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "me.shedaniel.unified-publishing"
}

def generatedResources = project(':common').file("src/generated")

archivesBaseName = "[Forge] ${rootProject.archives_base_name}"

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "fairyfactions-common.mixins.json"
        //mixinConfig "fairyfactions.mixins.json"
    }

    runs {
        data {
            data()
            programArgs "--all", "--mod", "fairyfactions"
            programArgs "--output", generatedResources.absolutePath
            programArgs "--existing", project(':common').file("src/main/resources").absolutePath
            programArgs "--existing", file("src/main/resources").absolutePath

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            //args '--mod', 'fairyfactions', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            //programArgs("--all", "--mod", "fairyfactions")
            //programArgs("--output", project(':common').file("src/generated/resources").absolutePath)
            //programArgs("--existing", project(':common').file("src/main/resources").absolutePath)
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

unifiedPublishing {
    project{
        displayName = "[Forge] ${rootProject.archives_base_name}-${mod_version}"
        changelog = "see the changelog page in the pages tab for more info on the latest changes"
        releaseType = "release"
        gameVersions = ["1.19.3"]
        gameLoaders = ["forge"]

        mainPublication tasks.remapJar // Declares the publicated jar

        relations {
            depends { // Mark as a required dependency
                curseforge = "architectury-api" // Optional, project slug
            }
            includes {} // Mark as an included dependency
            optional {} // Mark as an optional dependency
            conflicts {} // Mark as a conflicted dependency
        }

        var cfToken = System.getenv("CF_TOKEN")
        if (project.hasProperty("CF_TOKEN") || cfToken != null)  {
            curseforge {
                token = cfToken
                id = "839349" // Required, must be a string, ID of CurseForge project
            }
        }
    }
}
